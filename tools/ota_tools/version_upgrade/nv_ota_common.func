#!/bin/bash

# Copyright (c) 2021-2022, NVIDIA CORPORATION.  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# This is a script that exports common functions

_BASE_RECOVERY_IMAGE=
_BASE_RECOVERY_DTB=
# Base versions without layout change
_BASE_VERSIONS_NO_LAYOUT_CHANGE=()
_EXTLINUX_CONF_BACKUP="extlinux.conf.ota_backup"
_K_BYTES=1024
_NV_BOOT_CONTROL_CONF="nv_boot_control.conf"
_PARTLABEL_PATH="/dev/disk/by-partlabel"
_UPDATE_SPEC_SCRIPT="nv-l4t-bootloader-config.sh"

reboot_system()
{
	echo "Rebooting system ..."
	reboot
}

sha1sum_verify()
{
	local image_file="${1}"
	local sha1sum_file="${2}"

	ota_log "Verifying image ${image_file} with sha1 chksum file ${sha1sum_file}"
	if [ ! -f "${image_file}" ]; then
		ota_log "${image_file} is not found"
		return 1
	elif [ ! -f "${sha1sum_file}" ]; then
		ota_log "${sha1sum_file} is not found"
		return 1
	fi

	local sha1_chksum_gen=
	local sha1_chksum=
	sha1_chksum_gen="$(sha1sum "${image_file}" | cut -d\  -f 1)"
	sha1_chksum="$(cat "${sha1sum_file}")"
	if [ "${sha1_chksum_gen}" = "${sha1_chksum}" ];then
		ota_log "Sha1 checksum for ${image_file} (${sha1_chksum_gen}) matches"
		return 0
	else
		ota_log "Sha1 checksum for ${image_file} (${sha1_chksum_gen} != ${sha1_chksum}) does not match"
		return 1
	fi
}

set_active_boot_path()
{
	local active="${1}"

	if [ "${active}" = "A" ];then
		ota_log "Enable boot path A"
		if ! nvbootctrl set-active-boot-slot 0; then
			ota_log "Failed to run \"nvbootctrl set-active-boot-slot 0\""
			return 1
		fi
	elif [ "${active}" = "B" ];then
		ota_log "Enable boot path B"
		if ! nvbootctrl set-active-boot-slot 1; then
			ota_log "Failed to run \"nvbootctrl set-active-boot-slot 1\""
			return 1
		fi
	else
		ota_log "Invalid boot path, keep default"
		return 1
	fi
	return 0
}

read_part_opt()
{
	local infile="${1}"
	local outfile="${2}"
	local size="${3}"

	if [ ! -e "${infile}" ]; then
		ota_log "Input file ${infile} is not found"
		return 1
	fi

	if [ "${size}" -eq 0 ];then
		ota_log "The size of bytes to be read is ${size}"
		return 1
	fi

	local block=$((size / _K_BYTES))
	local remainder=$((size % _K_BYTES))
	local offset=$((block * _K_BYTES))

	ota_log "Reading ${size} bytes from ${infile}: 1KB block=${block} remainder=${remainder} offset=${offset}"

	if [ "${block}" -gt 0 ];then
		dd if="${infile}" of="${outfile}" bs=1K count=${block} >/dev/null 2>&1
		sync
	fi
	if [ ${remainder} -gt 0 ];then
		dd if="${infile}" of="${outfile}" bs=1 skip=${offset} seek=${offset} count=${remainder} >/dev/null 2>&1
		sync
	fi
	return 0
}

is_version_no_layout_change()
{
	# Check wehther there is partition layout change between
	# base version and the OTA version. The base version
	# is the version of currently running system and the
	# OTA version is the version be updated to.
	# Usage:
	#        is_version_no_layout_change {base_version}
	local base_version="${1}"
	local version=

	for version in "${_BASE_VERSIONS_NO_LAYOUT_CHANGE[@]}"
	do
		if [ "${base_version}" == "${version}" ];then
			return 0
		fi
	done
	return 1
}

enable_a_b_redundancy()
{
	# Enable A/B redundancy
	# Usage:
	#        enable_a_b_redundancy
	local _nv_update_engine=
	local _nvbootctrl=
	_nv_update_engine="$(which nv_update_engine)"
	_nvbootctrl="$(which nvbootctrl)"

	if [ "${_nv_update_engine}" = "" ]; then
		ota_log "nv_update_engine is not found"
		return 1
	fi

	if [ "${_nvbootctrl}" = "" ]; then
		ota_log "nvbootctrl is not found"
		return 1
	fi

	# check bootable slots
	local slots=
	slots=$(nvbootctrl get-number-slots)
	if [ "${slots}" -le 1 ]; then
		# enable a/b boot
		if ! nv_update_engine -e; then
			ota_log "Failed to enable A/B slots"
			return 1
		fi
		slots=$(nvbootctrl get-number-slots)
		if [ "${slots}" -le 1 ]; then
			ota_log "Only ${slots} slots exist, device is not ready for OTA. Please do RCM flash to recover it"
			return 1
		fi
	fi
	return 0
}

get_update_slot()
{
	# Get the bootloader slot or rootfs slot to be updated
	# Usage:
	#        get_update_slot {bl_rfs} {unified_ab} {_ret_slot}
	local bl_rfs="$1"
	local unified_ab="$2"
	local _ret_slot="$3"
	local current_slot=
	if [ "${unified_ab}" == 1 ] || [ "${bl_rfs}" == "bootloader" ]; then
		current_slot=$(nvbootctrl get-current-slot)
	elif [ "${bl_rfs}" == "rootfs" ]; then
		current_slot=$(nvbootctrl -t rootfs get-current-slot)
	else
		ota_log "ERROR: invalid arguments ${bl_rfs}"
		return 1
	fi

	# If current slot is A, set "UPDATE_SLOT" to "B",
	# if current slot is B, set "UPDATE_SLOT" to "A".
	if [ "${current_slot}" == "0" ]; then
		eval "${_ret_slot}=B"
	elif [ "${current_slot}" == "1" ]; then
		eval "${_ret_slot}=A"
	else
		ota_log "Failed to get current slot"
		return 1
	fi
	return 0
}

write_base_recovery()
{
	# Write recovery image/dtb for current system to boot into recovery
	# kernel.
	# If recovery partition and recovery-dtb partition exist, write recovery
	# image into recovery partition and recovery-dtb image to recovery-dtb
	# partition.
	# Otherwise, write the recovery image into kernel partition and recovery
	# dtb into kernel-dtb partition.
	# Usage:
	#        write_base_recovery ${work_dir}
	local work_dir="${1}"
	local recovery_image=${work_dir}/${_BASE_RECOVERY_IMAGE}
	local recovery_dtb=${work_dir}/${_BASE_RECOVERY_DTB}
	local recovery_image_sha1sum=${work_dir}/${_BASE_RECOVERY_IMAGE}.sha1sum
	local recovery_dtb_sha1sum=${work_dir}/${_BASE_RECOVERY_DTB}.sha1sum
	local target_partition=
	local target_dtb_partition=
	local recovery_exist=

	# Verifying base recovery image and dtb
	if ! sha1sum_verify "${recovery_image}" "${recovery_image_sha1sum}"; then
		ota_log "Failed to run \"sha1sum_verify ${recovery_image} ${recovery_image_sha1sum}\""
		return 1
	fi
	if ! sha1sum_verify "${recovery_dtb}" "${recovery_dtb_sha1sum}"; then
		ota_log "Failed to run \"sha1sum_verify ${recovery_dtb} ${recovery_dtb_sha1sum}\""
		return 1
	fi

	# Check whether recovery and recovery-dtb partitiosn exist
	target_partition="${_PARTLABEL_PATH}/recovery"
	target_dtb_partition="${_PARTLABEL_PATH}/recovery-dtb"
	if [ ! -e "${target_partition}" ] || [ ! -e "${target_dtb_partition}" ]; then
		# Use kernel and kernel-dtb partition instead
		ota_log "Recovery partition or recovery-dtb partition is not found, use kernel and kernel-dtb partitions"
		target_partition="${_PARTLABEL_PATH}/kernel"
		target_dtb_partition="${_PARTLABEL_PATH}/kernel-dtb"
		if [ ! -e "${target_partition}" ] || [ ! -e "${target_dtb_partition}" ]; then
			ota_log "Error: kernel partition or kernel-dtb partition is not found, exit "
			return 1
		fi
		recovery_exist=0
	else
		recovery_exist=1
	fi

	# Backup target and target-dtb partition
	dd if="${target_partition}" of="${work_dir}/target.backup" >/dev/null 2>&1
	dd if="${target_dtb_partition}" of="${work_dir}/target-dtb.backup" >/dev/null 2>&1
	sync
	ota_log "Backed up kernel and kernel-dtb partition under ${work_dir} before writing them"

	# For base version earlier than R32.3, there is no recovery partition
	# and the recovery image and recovery dtb must be loaded from kernel
	# partition and kernel-dtb partition. Therefore, we have to set
	# the slot B as active in case any reboot in writing recovery image
	# and recovery dtb into kernel partition and kernel-dtb partition.
	if [ "${recovery_exist}" == 0 ] ; then
		ota_log "Set boot path B as active"
		if ! set_active_boot_path "B"; then
			ota_log "Failed to run \"set_active_boot_path B\""
			return 1
		fi
	fi

	# Write recovery image and do read-back verification
	ota_log "Writing base recovery image into ${target_partition}"
	local image_size=
	# shellcheck disable=SC2012
	image_size=$(ls -al "${recovery_image}" | cut -d\  -f 5)
	local tmp_image="${work_dir}/image.tmp"
	dd if="${recovery_image}" of="${target_partition}" >/dev/null 2>&1
	sync
	ota_log "Read back base recovery image into ${tmp_image} and verify it"
	if ! read_part_opt "${target_partition}" "${tmp_image}" "${image_size}"; then
		ota_log "Failed to read ${image_size} bytes from ${target_partition} to ${tmp_image}"
		return 1
	fi
	if ! sha1sum_verify "${tmp_image}" "${recovery_image_sha1sum}"; then
		ota_log "Failed to run \"sha1sum_verify ${tmp_image} ${recovery_image_sha1sum}\""
		return 1
	fi

	# Write recovery dtb and do read-back verification
	ota_log "Writing base recovery dtb into ${target_dtb_partition}"
	# shellcheck disable=SC2012
	image_size=$(ls -al "${recovery_dtb}" | cut -d\  -f 5)
	dd if="${recovery_dtb}" of="${target_dtb_partition}" >/dev/null 2>&1
	sync
	ota_log "Read back base recovery dtb into ${tmp_image} and verify it"
	if ! read_part_opt "${target_dtb_partition}" "${tmp_image}" "${image_size}"; then
		ota_log "Failed to read ${image_size} bytes from ${target_dtb_partition} to ${tmp_image}"
		return 1
	fi
	if ! sha1sum_verify "${tmp_image}" "${recovery_dtb_sha1sum}"; then
		ota_log "Failed to run \"sha1sum_verify ${tmp_image} ${recovery_dtb_sha1sum}\""
		return 1
	fi

	# Set boot path A as active to make sure the recovery image and
	# recovery dtb from is loaded from kernel parition and kernel-dtb
	# partition respectively
	if [ "${recovery_exist}" == 0 ]; then
		ota_log "Set boot path A as active"
		if ! set_active_boot_path "A"; then
			ota_log "Failed to run \"set_active_boot_path B\""
			return 1
		fi
	fi
	return 0
}

write_kernel_bootctrl()
{
	# Write kernel-bootctrl partition
	# Return error if the kernel-bootctrl partition does not exist
	# Usage:
	#        write_kernel_bootctrl ${work_dir}
	local work_dir="${1}"
	local bootctrl_update_file="${work_dir}/kernel_bootctrl.bin.update"
	local bootctrl_normal_file="${work_dir}/kernel_bootctrl.bin.normal"
	local bootctrl_partition=

	if [ ! -f "${bootctrl_update_file}" ]; then
		ota_log "${bootctrl_update_file} is not found"
		return 1
	fi
	if [ ! -f "${bootctrl_normal_file}" ]; then
		ota_log "${bootctrl_normal_file} is not found"
		return 1
	fi

	# Get the kernel-bootctrl partition
	bootctrl_partition="${_PARTLABEL_PATH}/kernel-bootctrl"
	if [ ! -e "${bootctrl_partition}" ]; then
		ota_log "Error: kernel-bootctrl partition is not found"
		return 1
	fi

	# Backup the bootctrl partition
	sudo dd if="${bootctrl_partition}" of="${work_dir}/bootctrl.backup"
	ota_log "Backed up kernel-bootctrl partition under ${work_dir} before writing them"

	# Write bootctrl update file into bootctrl partition
	ota_log "Writing bootctrl update file into ${bootctrl_partition}"
	local image_size=
	# shellcheck disable=SC2012
	image_size=$(ls -al "${bootctrl_update_file}" | cut -d\  -f 5)
	local tmp_image=${work_dir}/image.tmp
	dd if="${bootctrl_update_file}" of="${bootctrl_partition}" >/dev/null 2>&1
	sync
	ota_log "Read back bootctrl update file into ${tmp_image} and verify it"
	if ! read_part_opt "${bootctrl_partition}" "${tmp_image}" "${image_size}"; then
		ota_log "Failed to read ${image_size} bytes from ${bootctrl_partition} to ${tmp_image}"
		return 1
	fi
	if ! diff -up "${tmp_image}" "${bootctrl_update_file}" >/dev/null 2>&1; then
		ota_log "The ${tmp_image} read back does not match ${bootctrl_update_file}"
		# Write bootctrl normal file into bootctrl partition
		dd if="${bootctrl_normal_file}" of="${bootctrl_partition}" >/dev/null 2>&1
		return 1
	fi
	return 0
}

get_base_version()
{
	# Get the version of currently running system
	# Usage:
	#        get_base_version {_ret_base_version}
	local _ret_base_version="${1}"
	local nv_tegra_rel_file="/etc/nv_tegra_release"
	local nv_tegra_rel_bsp=""
	local nv_tegra_rel_rev_major=""
	local nv_tegra_rel_ver=""

	if [ ! -f "${nv_tegra_rel_file}" ]; then
		ota_log "${nv_tegra_rel_file} is not found"
		return 1
	fi
	nv_tegra_rel_bsp="$(grep -oE "[R0-9]+ \(release\)" <"${nv_tegra_rel_file}" | cut -d\  -f 1)"
	if [ "${nv_tegra_rel_bsp}" == "" ]; then
		ota_log "Failed to get BSP release version from ${nv_tegra_rel_file}"
		return 1
	fi
	nv_tegra_rel_rev_major="$(grep -oE "REVISION: [0-9]" <"${nv_tegra_rel_file}" | cut -d\  -f 2)"
	if [ "${nv_tegra_rel_rev_major}" == "" ]; then
		ota_log "Failed to get BSP revision from ${nv_tegra_rel_file}"
		return 1
	fi
	nv_tegra_rel_ver="${nv_tegra_rel_bsp}-${nv_tegra_rel_rev_major}"

	eval "${_ret_base_version}=${nv_tegra_rel_ver}"
}

get_board_name_from_compatible_spec()
{
	# Get the board name by parsing the compatible spec
	# Usage:
	#        get_board_name_from_compatible_spec {spec} {_ret_board_name}

	local spec="${1}"
	local _ret_board_name="${2}"
	local board_id=
	local board_ver=
	local board_sku=
	local board_rev=
	local board_fuselevel=
	local chip_rev=

	board_id=$( echo "${spec}" | awk -F"-" '{print $1}' )
	board_ver=$( echo "${spec}" | awk -F"-" '{print $2}' )
	board_sku=$( echo "${spec}" | awk -F"-" '{print $3}' )
	board_rev=$( echo "${spec}" | awk -F"-" '{print $4}' )
	board_fuselevel=$( echo "${spec}" | awk -F"-" '{print $5}' )
	chip_rev=$( echo "${spec}" | awk -F"-" '{print $6}' )

	local tmp_spec=
	tmp_spec="${board_id}-${board_ver}-${board_sku}-${board_rev}-${board_fuselevel}-${chip_rev}"
	local boot_info=
	boot_info=${spec//"${tmp_spec}-"/}
	local count=
	count=$(echo "${boot_info}" | awk '{print split($0,a,"-");}')
	local rootdev=
	rootdev=$(echo "${boot_info}" | awk '{split($0,a,"-"); print a['"${count}"']}')
	eval "${_ret_board_name}=${boot_info%"-${rootdev}"}"
}

get_target_board()
{
	# Get the name of target board from /etc/nv_boot_control.conf
	# Usage:
	#        get_target_board {_ret_target_board}
	local _ret_target_board="${1}"
	local nv_boot_control_conf="/etc/${_NV_BOOT_CONTROL_CONF}"
	local compatible_spec=
	local nv_bootctrl_board_name=

	# Get COMPATIBLE_SPEC from /etc/nv_boot_control.conf
	compatible_spec="$(awk '/COMPATIBLE_SPEC/ {print $2}' "${nv_boot_control_conf}")"
	if [ "${compatible_spec}" == "" ]; then
		ota_log "Error: invalid COMPATIBLE_SPEC(${compatible_spec}) in the ${nv_boot_control_conf}"
		return 1
	fi

	# Parse the COMPATIBLE_SPEC to get the name of the targe board
	get_board_name_from_compatible_spec "${compatible_spec}" "nv_bootctrl_board_name"
	eval "${_ret_target_board}=${nv_bootctrl_board_name}"
}

check_bsp_version()
{
	# Check whether the version of the OTA payload package matches
	# the base version.
	# Usage:
	#        check_bsp_version {work_dir} {ota_device} {_ret_base_version}
	local work_dir="${1}"
	local ota_device="${2}"
	local _ret_base_version="${3}"
	local sys_base_version=
	local ota_base_version=

	if ! get_base_version "sys_base_version"; then
		ota_log "Failed to run \"get_base_version sys_base_version\""
		return 1
	fi
	if [ ! -f "${work_dir}/base_version" ]; then
		ota_log "BSP base version file is not found at ${work_dir}/base_version"
		return 1
	fi
	ota_base_version="$(cat "${work_dir}/base_version")"

	if [ "${ota_base_version}" != "${sys_base_version}" ]; then
		ota_log "The version of OTA package(${ota_base_version}) does not match the version of current system(${sys_base_version}), please check whether the OTA package is correct"
		return 1
	fi

	# Only R28.3 support OTA update with SD card as backup boot path
	# for layout change case. However, it is outdated in current code.
	if [ "${ota_device}" != "" ] && [ "${ota_device}" != "/dev/mmcblk0" ] \
		&& [ "${sys_base_version}" != "R28-3" ] ; then
		ota_log "Only supports using internal storage(/dev/mmcblk0) except upgrading from R28.3"
		return 1
	fi

	# Generate a version string that is used as suffix for recovery image/dtb
	# For R28.x version, version suffix is "R28"
	# For R32.1/R32.2, version suffix is "R32_1_2"
	# For R32.3 and later, version suffix is "R32_3_4"
	local version_suffix=
	case "${sys_base_version}" in
	R28-*) version_suffix="R28"; ;;
	R32-1|R32-2) version_suffix="R32_1_2"; ;;
	R32-*) version_suffix="R32_3_4"; ;;
	*)
		echo "Invalid base version ${sys_base_version}"
		return 1
	esac
	_BASE_RECOVERY_IMAGE=recovery.img.${version_suffix}
	_BASE_RECOVERY_DTB=recovery.dtb.${version_suffix}

	if [ "${_ret_base_version}" != "" ]; then
		eval "${_ret_base_version}=${sys_base_version}"
	fi
	return 0
}

check_target_board()
{
	# Check whether the board name of the OTA payload package matches
	# the target board.
	# Usage:
	#        check_target_board {work_dir} {_ret_target_board}
	local work_dir="${1}"
	local _ret_target_board="${2}"
	local sys_target_board=
	local ota_target_board=

	if ! get_target_board "sys_target_board"; then
		ota_log "Failed to run \"get_target_board sys_target_board\""
		return 1
	fi

	if [ ! -f "${work_dir}/board_name" ]; then
		ota_log "Target board name file is not found at ${work_dir}/board_name"
		return 1
	fi
	ota_target_board="$(cat "${OTA_WORK_DIR}/board_name")"

	if [ "${ota_target_board}" != "${sys_target_board}" ]; then
		ota_log "The board name in OTA package(${ota_target_board}) does not match current board(${sys_target_board})"
		return 1
	fi
	if [ "${_ret_target_board}" != "" ]; then
		eval "${_ret_target_board}=${sys_target_board}"
	fi

	return 0
}

backup_extlinux_conf()
{
	# Back up the extlinux.conf file to extlinux.conf.bk
	# Usage:
	#        backup_extlinux_conf {work_dir}

	local work_dir="${1}"
	local extlinux_conf="/boot/extlinux/extlinux.conf"

	if [ -f "${extlinux_conf}" ]; then
		ota_log "Backing up ${extlinux_conf}"
		mv "${extlinux_conf}" "${work_dir}/${_EXTLINUX_CONF_BACKUP}"
	fi
	return 0
}

update_nv_boot_control()
{
	# Update the TNSPEC and COMPATIBLE_SPEC in the specified boot
	# control file ${nv_boot_control_conf} according to the board
	# specification of target board
	# Usage:
	#        update_nv_boot_control ${work_dir} {nv_boot_control_conf}
	local work_dir="${1}"
	local nv_boot_control_conf="${2}"
	local update_script="${work_dir}/${_UPDATE_SPEC_SCRIPT}"

	if [ ! -f "${nv_boot_control_conf}" ]; then
		ota_log "The file ${nv_boot_control_conf} is not found"
		exit 1
	fi
	# Execute the "nv-l4t-bootloader-config.sh" to update TNSPEC and COMPATIBLE_SPEC
	if ! "${update_script}" -c -f "${nv_boot_control_conf}"; then
		ota_log "Failed to run \"${update_script} -c -f ${nv_boot_control_conf}\""
		exit 1
	fi
	return 0
}

get_chip_id()
{
	# Get chip id from the /etc/nv_boot_control.conf
	# Usage:
	#        get_chip_id {_ret_chip_id}
	local _ret_chip_id="${1}"
	local nv_boot_control_conf="/etc/${_NV_BOOT_CONTROL_CONF}"
	local _chip_id=
	_chip_id=$(awk '/TEGRA_CHIPID/ {print $2}' "${nv_boot_control_conf}")
	if [ "${_chip_id}" == "" ]; then
		ota_log "Failed get TEGRA_CHIPID from ${nv_boot_control_conf}"
		return 1
	fi
	eval "${_ret_chip_id}=${_chip_id}"
	return 0
}

update_nv_boot_control_in_rootfs()
{
	# Update the /etc/nv_boot_control.conf in rootfs
	# Usage:
	#        update_nv_boot_control_in_rootfs {work_dir}
	local work_dir="${1}"
	local sys_base_version=
	if ! get_base_version "sys_base_version"; then
		ota_log "Failed to run \"get_base_version sys_base_version\""
		return 1
	fi

	# For R28.x, its format and content is obsolete and needs to be replaced
	# with the copy from OTA package.
	# For 32.x, its content may not be upto today.
	local tmp_boot_control_conf=
	if [[ "${sys_base_version}" =~ R28 ]]; then
		tmp_boot_control_conf="${work_dir}/ota_${_NV_BOOT_CONTROL_CONF}"
		update_nv_boot_control "${work_dir}" "${tmp_boot_control_conf}"
		# Overwrite the existing nv_boot_control.conf
		cp "${tmp_boot_control_conf}" "/etc/${_NV_BOOT_CONTROL_CONF}"
	else
		tmp_boot_control_conf="/etc/${_NV_BOOT_CONTROL_CONF}"
		update_nv_boot_control "${work_dir}" "${tmp_boot_control_conf}"
		# Copy the updated nv_boot_control.conf to OTA work directory
		# shellcheck disable=SC2140
		cp "${tmp_boot_control_conf}" "${work_dir}"/"ota_${_NV_BOOT_CONTROL_CONF}"
	fi
	return 0
}

check_prerequisites()
{
	# Check prerequisistes for applying image-based OTA:
	# 1) The extlinux.conf file exists
	# 2) The INITRD entry is set in extlinux.conf
	# 3) The root device is set in APPEND entry for T194 based devices
	# Usage:
	#        check_prerequisites {work_dir}
	local chip_id=
	local extlinux_conf="/boot/extlinux/extlinux.conf"

	# Get the chip id
	ota_log "get_chip_id chip_id"
	if ! get_chip_id "chip_id"; then
		ota_log "Failed to run \"get_chip_id chip_id\""
		exit 1
	fi

	# Check whether exlinux.conf exists
	if [ ! -f "${extlinux_conf}" ]; then
		ota_log "ERROR. ${extlinux_conf} does not exist"
		exit 1
	fi

	# Check whether INITRD is set in extlinut.conf
	# shellcheck disable=SC2155
	local initrd="$(grep -E "^[ \t]*INITRD.*[ \t]/boot/initrd" ${extlinux_conf})"
	if [ "${initrd}" == "" ]; then
		ota_log "ERROR: INITRD is not set in the extlinux.conf."
		ota_log "Please set it by your case, for example, /boot/initrd."
		exit 1
	fi

	# Return if it is not T194 based devices
	if [ "${chip_id}" != "0x19" ]; then
		ota_log "Skip checking root device for non-T194 devices"
		return 0
	fi

	# Check whether root= is set in extlinut.conf
	# shellcheck disable=SC2155
	local root_dev="$(grep -E "^[ \t]*APPEND.*[ \t]root=" ${extlinux_conf})"
	if [ "${root_dev}" == "" ]; then
		ota_log "ERROR: root device is not set in the extlinux.conf for t19x devices."
		ota_log "Please set it by your root device, for example, root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4."
		exit 1
	fi
}

set_rootfs_updater()
{
	# Set rootfs updater
	# Usage:
	#        set_rootfs_updater {work_dir} ${_ret_rootfs_updater}
	local work_dir="${1}"
	local _ret_rootfs_updater="${2}"
	local _rootfs_updater=

	# Retrieve ${ROOTFS_UPDATER} settings from nv_ota_customer.conf
	_rootfs_updater="${work_dir}"/"${ROOTFS_UPDATER}"
	if [ ! -f "${_rootfs_updater}" ]; then
		ota_log "The rootfs updater ${_rootfs_updater} is not found"
		return 1
	fi
	ota_log "Use rootfs updater: ${_rootfs_updater}"
	eval "${_ret_rootfs_updater}=${_rootfs_updater}"
}

get_devnode_from_name()
{
	# Get the devnode under /dev/ according to the partition name
	# Usage:
	#        get_devnode_from_name {name} {storage_device} {_ret_devnode}
	local part_name="${1}"
	local storage_device="${2}"
	local _ret_devnode="${3}"

	# Check whether there is any partition with specified name
	# If no such partition is found, set "${_ret_devnode}" to "" and
	# and directly return;
	# If only one partition with the name specified, set "${_ret_devnode}"
	# to this partition;
	# If more than one partition with the same name are found, set
	# "${_ret_devnode}" to the matched partition located on the same
	# storage device as current rootfs partition.

	local num_partition=
	num_partition="$(blkid | grep -c "PARTLABEL=\"${part_name}\"")"
	if [ "${num_partition}" -eq 0 ]; then
		eval "${_ret_devnode}="
		return
	fi
	local matched_partition=
	matched_partition="$(blkid | grep "PARTLABEL=\"${part_name}\"" | cut -d: -f 1)"
	if [ "${num_partition}" -eq 1 ]; then
		eval "${_ret_devnode}=${matched_partition}"
		return
	fi

	# Get storage_device if it is not passed-in
	if [ "${storage_device}" == "" ]; then
		storage_device="$(df / | tail -n 1 | cut -d\  -f 1 | sed 's/[0-9][0-9]*$//g')"
	fi
	matched_partition="$(echo "${matched_partition}" | grep "${storage_device}")"
	eval "${_ret_devnode}=${matched_partition}"
}

update_recovery()
{
	# Update recovery/recovery-dtb partitions with ToT recovery image/dtb
	# Usage:
	#     update_recovery {work_dir} {storaget_device}
	local work_dir="${1}"
	local storage_device="${2}"
	local recovery_image="${1}/images-R32-ToT/recovery.img"
	local recovery_dtb="${1}/images-R32-ToT/recovery.dtb"
	if [ ! -f "${recovery_image}" ] || [ ! -f "${recovery_dtb}" ] ; then
		ota_log "Skip updating recovery and recovery-dtb"
		return 0
	fi

	# Write recovery partition
	local target_partition="${_PARTLABEL_PATH}/recovery"
	if [ ! -e "${target_partition}" ]; then
		get_devnode_from_name "recovery" "${storage_device}" "target_partition"
		if [ "${target_partition}" == "" ] || [ ! -e "${target_partition}" ]; then
			ota_log "Failed to find recovery partition"
			return 1
		fi
	fi
	ota_log "Writing ${recovery_image} into ${target_partition}"
	if ! dd if="${recovery_image}" of="${target_partition}" >/dev/null 2>&1; then
		ota_log "Failed to write ${recovery_image} into ${target_partition}"
		return 1
	fi

	# Write recovery-dtb partition
	target_partition="${_PARTLABEL_PATH}/recovery-dtb"
	if [ ! -e "${target_partition}" ]; then
		get_devnode_from_name "recovery-dtb" "${storage_device}" "target_partition"
		if [ "${target_partition}" == "" ] || [ ! -e "${target_partition}" ]; then
			ota_log "Failed to find recovery-dtb partition"
			return 1
		fi
	fi
	ota_log "Writing ${recovery_dtb} into ${target_partition}"
	if ! dd if="${recovery_dtb}" of="${target_partition}" >/dev/null 2>&1; then
		ota_log "Failed to write ${recovery_dtb} into ${target_partition}"
		return 1
	fi

	return 0
}
